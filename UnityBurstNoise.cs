using Unity.Mathematics;
using static Unity.Mathematics.math;

public static class UnityBurstNoise
{
    private const double F2 = 0.366025403784439;
    private const float G2 = -0.211324865405187f;
    private static readonly int3 PRIMES = new int3(7691, 1879, 30869);
    private static readonly int2 BPRIMES = new int2(668908897, 35311);
    
    public static float simplex(double2 p, int seed)
    {
        p += dot(p, new double2(F2));
        double2 b = floor(p);
        float2 i = (float2)(p - b);

        int2 ib = (int2)b;
        int2 v1 = ib + 1;
        int3 xPrimed = new int3(ib.x, v1.x, ib.x) * PRIMES.x;
        int3 yPrimed = new int3(ib.y, v1.y, ib.y) * PRIMES.y;

        float unskew = dot(i, new float2(G2));
        float4 d01 = i.xyxy + unskew - new float4(0.0f, 0.0f, new float2(2.0f * G2 + 1.0f));

        float2 d2;
        if (i.y > i.x) {
            yPrimed.z += PRIMES.y;
            d2 = d01.xy - new float2(G2, 1.0f + G2);
        } else {
            xPrimed.z += PRIMES.x;
            d2 = d01.xy - new float2(1.0f + G2, G2);
        }

        int3 hashes = seed ^ xPrimed ^ yPrimed;
        hashes = (hashes * 0x27D4EB2D) >> 15;
        hashes &= 0x7F;

        float3 a = max(new float3(0.0f), 0.5f - new float3(dot(d01.xy, d01.xy), dot(d01.zw, d01.zw), dot(d2, d2)));
        float3 aa = a * a; float3 aaaa = aa * aa;
        float2 g1 = GRAD2[hashes.x]; float2 g2 = GRAD2[hashes.y]; float2 g3 = GRAD2[hashes.z];
        float3 ramped = new float3(dot(d01.xy, g1), dot(d01.zw, g2), dot(d2, g3));

        return dot(aaaa, ramped);
    }

    private static readonly float2[] GRAD2 = {
        new float2(13.031324456287654f, 98.98273633310245f), new float2(38.20591014244875f, 92.23722642870753f), new float2(60.77682619065379f, 79.20590197241988f), 
        new float2(79.20590197241988f, 60.77682619065379f), new float2(92.23722642870753f, 38.20591014244875f), new float2(98.98273633310245f, 13.031324456287555f), 
        new float2(98.98273633310245f, -13.031324456287555f), new float2(92.23722642870753f, -38.20591014244875f), new float2(79.20590197241988f, -60.776826190653686f), 
        new float2(60.77682619065379f, -79.20590197241988f), new float2(38.20591014244875f, -92.23722642870753f), new float2(13.031324456287654f, -98.98273633310245f), 
        new float2(-13.031324456287654f, -98.98273633310245f), new float2(-38.20591014244875f, -92.23722642870753f), new float2(-60.77682619065379f, -79.20590197241988f), 
        new float2(-79.20590197241988f, -60.77682619065379f), new float2(-92.23722642870753f, -38.20591014244875f), new float2(-98.98273633310245f, -13.031324456287654f), 
        new float2(-98.98273633310245f, 13.031324456287555f), new float2(-92.23722642870753f, 38.20591014244875f), new float2(-79.20590197241988f, 60.77682619065379f), 
        new float2(-60.77682619065379f, 79.20590197241988f), new float2(-38.20591014244875f, 92.23722642870753f), new float2(-13.031324456287654f, 98.98273633310245f),
        new float2(13.031324456287654f, 98.98273633310245f), new float2(38.20591014244875f, 92.23722642870753f), new float2(60.77682619065379f, 79.20590197241988f), 
        new float2(79.20590197241988f, 60.77682619065379f), new float2(92.23722642870753f, 38.20591014244875f), new float2(98.98273633310245f, 13.031324456287555f), 
        new float2(98.98273633310245f, -13.031324456287555f), new float2(92.23722642870753f, -38.20591014244875f), new float2(79.20590197241988f, -60.776826190653686f), 
        new float2(60.77682619065379f, -79.20590197241988f), new float2(38.20591014244875f, -92.23722642870753f), new float2(13.031324456287654f, -98.98273633310245f), 
        new float2(-13.031324456287654f, -98.98273633310245f), new float2(-38.20591014244875f, -92.23722642870753f), new float2(-60.77682619065379f, -79.20590197241988f), 
        new float2(-79.20590197241988f, -60.77682619065379f), new float2(-92.23722642870753f, -38.20591014244875f), new float2(-98.98273633310245f, -13.031324456287654f), 
        new float2(-98.98273633310245f, 13.031324456287555f), new float2(-92.23722642870753f, 38.20591014244875f), new float2(-79.20590197241988f, 60.77682619065379f), 
        new float2(-60.77682619065379f, 79.20590197241988f), new float2(-38.20591014244875f, 92.23722642870753f), new float2(-13.031324456287654f, 98.98273633310245f),
        new float2(13.031324456287654f, 98.98273633310245f), new float2(38.20591014244875f, 92.23722642870753f), new float2(60.77682619065379f, 79.20590197241988f), 
        new float2(79.20590197241988f, 60.77682619065379f), new float2(92.23722642870753f, 38.20591014244875f), new float2(98.98273633310245f, 13.031324456287555f), 
        new float2(98.98273633310245f, -13.031324456287555f), new float2(92.23722642870753f, -38.20591014244875f), new float2(79.20590197241988f, -60.776826190653686f), 
        new float2(60.77682619065379f, -79.20590197241988f), new float2(38.20591014244875f, -92.23722642870753f), new float2(13.031324456287654f, -98.98273633310245f), 
        new float2(-13.031324456287654f, -98.98273633310245f), new float2(-38.20591014244875f, -92.23722642870753f), new float2(-60.77682619065379f, -79.20590197241988f), 
        new float2(-79.20590197241988f, -60.77682619065379f), new float2(-92.23722642870753f, -38.20591014244875f), new float2(-98.98273633310245f, -13.031324456287654f), 
        new float2(-98.98273633310245f, 13.031324456287555f), new float2(-92.23722642870753f, 38.20591014244875f), new float2(-79.20590197241988f, 60.77682619065379f), 
        new float2(-60.77682619065379f, 79.20590197241988f), new float2(-38.20591014244875f, 92.23722642870753f), new float2(-13.031324456287654f, 98.98273633310245f),
        new float2(13.031324456287654f, 98.98273633310245f), new float2(38.20591014244875f, 92.23722642870753f), new float2(60.77682619065379f, 79.20590197241988f), 
        new float2(79.20590197241988f, 60.77682619065379f), new float2(92.23722642870753f, 38.20591014244875f), new float2(98.98273633310245f, 13.031324456287555f), 
        new float2(98.98273633310245f, -13.031324456287555f), new float2(92.23722642870753f, -38.20591014244875f), new float2(79.20590197241988f, -60.776826190653686f), 
        new float2(60.77682619065379f, -79.20590197241988f), new float2(38.20591014244875f, -92.23722642870753f), new float2(13.031324456287654f, -98.98273633310245f), 
        new float2(-13.031324456287654f, -98.98273633310245f), new float2(-38.20591014244875f, -92.23722642870753f), new float2(-60.77682619065379f, -79.20590197241988f), 
        new float2(-79.20590197241988f, -60.77682619065379f), new float2(-92.23722642870753f, -38.20591014244875f), new float2(-98.98273633310245f, -13.031324456287654f), 
        new float2(-98.98273633310245f, 13.031324456287555f), new float2(-92.23722642870753f, 38.20591014244875f), new float2(-79.20590197241988f, 60.77682619065379f), 
        new float2(-60.77682619065379f, 79.20590197241988f), new float2(-38.20591014244875f, 92.23722642870753f), new float2(-13.031324456287654f, 98.98273633310245f),
        new float2(13.031324456287654f, 98.98273633310245f), new float2(38.20591014244875f, 92.23722642870753f), new float2(60.77682619065379f, 79.20590197241988f), 
        new float2(79.20590197241988f, 60.77682619065379f), new float2(92.23722642870753f, 38.20591014244875f), new float2(98.98273633310245f, 13.031324456287555f), 
        new float2(98.98273633310245f, -13.031324456287555f), new float2(92.23722642870753f, -38.20591014244875f), new float2(79.20590197241988f, -60.776826190653686f), 
        new float2(60.77682619065379f, -79.20590197241988f), new float2(38.20591014244875f, -92.23722642870753f), new float2(13.031324456287654f, -98.98273633310245f), 
        new float2(-13.031324456287654f, -98.98273633310245f), new float2(-38.20591014244875f, -92.23722642870753f), new float2(-60.77682619065379f, -79.20590197241988f), 
        new float2(-79.20590197241988f, -60.77682619065379f), new float2(-92.23722642870753f, -38.20591014244875f), new float2(-98.98273633310245f, -13.031324456287654f), 
        new float2(-98.98273633310245f, 13.031324456287555f), new float2(-92.23722642870753f, 38.20591014244875f), new float2(-79.20590197241988f, 60.77682619065379f), 
        new float2(-60.77682619065379f, 79.20590197241988f), new float2(-38.20591014244875f, 92.23722642870753f), new float2(-13.031324456287654f, 98.98273633310245f),
        new float2(38.20591014244875f, 92.23722642870753f), new float2(92.23722642870753f, 38.20591014244875f), new float2(38.20591014244875f, -92.23722642870753f), new float2(92.23722642870753f, -38.20591014244875f),
        new float2(-38.20591014244875f, 92.23722642870753f), new float2(-92.23722642870753f, 38.20591014244875f), new float2(-38.20591014244875f, -92.23722642870753f), new float2(-92.23722642870753f, -38.20591014244875f),
    };
}
